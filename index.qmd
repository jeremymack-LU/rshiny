---
title: "Shiny Apps with R <br/><br/><br/><br/><br/>"
title-slide-attributes:
    data-background-image: images/lts_logo.jpg
    data-background-size: "30%"
    data-background-opacity: "0.90"
    data-background-position: "50% 45%"
format:
   revealjs:
     theme: [dark, custom.scss]
     code-fold: false
     slide-number: c
     controls: true
     css: custom.css
     menu: {
      side: 'left',
      numbers: true,
      markers: true,
      width: 'normal',
      hideMissingTitles: true,
      titleSelector: ''}
preview-links: auto
---

## Structure of the presentation {data-menu-title="Presentation outline"}

The presentation is split into seven topics:

::: fragment
-   Topic 1:    Shiny Apps - an overview
:::

::: fragment
-   Topic 2:    User Interface (ui)

-   Topic 3:    Reactive Programming (server)

-   Topic 4:    Layouts and Themes
:::

::: fragment
-   Topic 5:    Example - Lehigh Valley Temperature

-   Topic 6:    Deploying Shiny Apps
:::

::: fragment
-   Topic 7:    Additional resources
:::

::: fragment
-   Raw code available on [Github](https://github.com/jeremymack-LU/rshiny/blob/main/index.qmd)
:::

![](images/r_learners.png){.absolute bottom="0" right="0" width="50%" height="50%"}

# Topic 1 {data-menu-title="Topic 1"}

[Shiny Apps - an overview]{style="font-size: 1.5em; text-align: center"}

## Topic 1: Shiny Apps - an overview {data-menu-title="Shiny overview"}

-   Posit product - `shiny`
    ```{r style="font-size: 0.85em"}
#| echo: true
#| eval: false
  
install.packages('shiny'); library(shiny)
    ```

-   Web application framework for R

-   Build interactive web applications, reports, and dashboards

    -   [**Reactive Programming**]{style="color:#edea2b"}

![](images/shiny_hex.png){.absolute top="15" right="50" height="250"}

## Topic 1: Shiny Apps - an overview {data-menu-title="Shiny example"}

<p>

<a href="https://jeremymack.shinyapps.io/purpleair/"> <img src="./images/shinyapp.png" alt="Picture of learning R graph" height="100%" width="100%"/> </a>

</p>

## Topic 1: Shiny Apps - an overview {data-menu-title="Shiny start"}

-   Posit product - `shiny`

-   Web application framework for R

-   Three ways to start creating a Shiny App:

::: fragment
::: panel-tabset
### 1

1.  In RStudio, click the new file button and select `Shiny Web App...`

<center>

<img src="./images/shiny_start.png" alt="screenshot" height="280"/>

</center>

### 2

2.  In RStudio, click `File` \| `New Project`, select `New Directory`, and then click `Shiny Web Application`

<center>

<img src="./images/shiny_start4a.png" alt="screenshot" height="280"/>   <img src="./images/shiny_start4b.png" alt="screenshot" height="280"/>

</center>

### 3

3.  Create a new directory and put a single file called `app.R` in it</br>
(\*Shortcut - add the app boilerplate by typing `shinyapp` and pressing Shift+Tab)

<center>

<img src="./images/shiny_start5.png" alt="screenshot" height="280"/>   <img src="./images/shiny_start2.png" alt="screenshot" height="280"/>   <img src="./images/shiny_start3.png" alt="screenshot" height="280"/>

</center>
:::
:::

![](images/shiny_hex.png){.absolute top="15" right="50" height="250"}

## Topic 1: Shiny Apps - an overview {data-menu-title="Shiny components"}

-   Posit product - `shiny`

-   Web application framework for R

-   Three basic components:

    ::: {.incremental}
    1. User interface (ui) object
    2. Server function (server)
    3. Call to the shinyApp function
    :::

![](images/shiny_hex.png){.absolute top="15" right="50" height="250"}

# Topic 2 {data-menu-title="Topic 2"}

[User Interface (ui)]{style="font-size: 1.5em; text-align: center"}

## Topic 2: User Interface (ui) {data-menu-title="ui inputs"}

![](images/shiny_hex.png){.absolute top="15" right="50" height="250"}

-   Application's front end appearance

-   Collection of `input` and `output` functions

::: {.fragment fragment-index=1}
-   Input functions

    - Adds input controls to the ui
    - First argument: `inputId`
    - Basic types:
    
      1. Text
      2. Numeric
      3. Dates
      4. Choices (drop downs, radio buttons, checkboxes)
      5. Uploads
      6. Action buttons
:::

## Topic 2: User Interface (ui) {data-menu-title="ui inputs"}
    
::: panel-tabset
### Text

```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
library(shiny)

ui <- fluidPage(
  textInput("name", "What's your name?"),
  passwordInput("password", "What's your password?"),
  textAreaInput("story", "Tell me about yourself", rows = 3)
  )

server <- function(input, output, session) {}

shinyApp(ui, server)
```

### Numeric

```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
library(shiny)

ui <- fluidPage(
  numericInput("num", "Number one", value = 0, min = 0, max = 100),
  sliderInput("num2", "Number two", value = 50, min = 0, max = 100),
  sliderInput("rng", "Range", value = c(10, 20), min = 0, max = 100)
  )

server <- function(input, output, session) {}

shinyApp(ui, server)
```

### Dates

```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
library(shiny)

ui <- fluidPage(
    dateInput("dob", "When were you born?"),
    dateRangeInput("range", "What is the date range of your data?")
    )

server <- function(input, output, session) {}

shinyApp(ui, server)
```

### Choices

::: panel-tabset
### Drop downs

```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
library(shiny)

ui <- fluidPage(
    selectInput("state", "What's your favorite state?", state.name),
    selectInput("state2", "What's your favourite state(s)?", state.name, multiple = TRUE)
    )

server <- function(input, output, session) {}

shinyApp(ui, server)
```

### Radio buttons

```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
library(shiny)

animals <- c("dog", "cat", "mouse", "bird", "other", "I don't like animals")

ui <- fluidPage(
    radioButtons("animal", "What's your favorite animal?", animals)
    )

server <- function(input, output, session) {}

shinyApp(ui, server)
```

### Checkboxes

```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
library(shiny)

ui <- fluidPage(
    radioButtons("animal", "What's your favorite animal?", animals),
    checkboxGroupInput("animal", "What animals do you like?", animals)
    )

server <- function(input, output, session) {}

shinyApp(ui, server)
```
:::

### Uploads

```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
library(shiny)

ui <- fluidPage(
    fileInput("upload", NULL)
    )

server <- function(input, output, session) {}

shinyApp(ui, server)
```

### Action buttons

```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
library(shiny)

ui <- fluidPage(
  actionButton("click", "Click me!"),
  actionButton("download", "Download")
  )

server <- function(input, output, session) {}

shinyApp(ui, server)
```
:::

## Topic 2: User Interface (ui) {data-menu-title="ui outputs"}

![](images/shiny_hex.png){.absolute top="15" right="50" height="250"}

-   Application's front end appearance

-   Collection of `input` and `output` functions

::: {.fragment fragment-index=1}
-   Output functions

    - Creates placeholders later filled by the server function (render)
    - First argument: `outputId`
    - Basic types:
    
      1. Text
      2. Tables
      3. Plots
:::

## Topic 2: User Interface (ui) {data-menu-title="ui outputs"}
::: panel-tabset
### Text

```{r}
#| eval: false
#| echo: true
library(shiny)

ui <- fluidPage(
    textInput("name", "What's your name?"),
    textOutput("text")
    )

server <- function(input, output, session) {
    output$text <- renderText({ 
        input$name
      })
    }

shinyApp(ui, server)
```

### Tables

```{r}
#| eval: false
#| echo: true
library(shiny)

ui <- fluidPage(
    tableOutput("static"),
    dataTableOutput("dynamic")
    )

server <- function(input, output, session) {
    output$static <- renderTable(head(mtcars))
    output$dynamic <- renderDataTable(mtcars, options = list(pageLength = 5))
    }

shinyApp(ui, server)
```

### Plots

```{r}
#| eval: false
#| echo: true

library(shiny)
library(ggplot2)

ui <- fluidPage(
    plotOutput("plot", width = "800px")
    )

server <- function(input, output, session) {
    output$plot <- renderPlot(
        ggplot(mtcars) + geom_point(aes(mpg,hp))
        )
    }

shinyApp(ui, server)
```
:::

## Review - User Interface (ui): {data-background="#000000" data-menu-title="Review 1 - ui"}

![](images/shiny_hex.png){.absolute bottom="0" right="0" height="40%"}

-   `shiny` package - web application framework for R

-   Three basic components:

    1. User interface (ui) object
    2. Server function (server)
    3. Call to the `shinyApp` function

::: fragment
-   User interface (ui) object:
    
    - Front end appearance
    - Collection of `input` and `output` functions
    - Id arguments used for reference within the `server` function
:::

# Topic 3 {data-menu-title="Topic 3"}

[Reactive Programming (server)]{style="font-size: 1.5em; text-align: center"}

## Topic 3: Reactive Programming (server) {data-menu-title="Reactive Programming"}

::: {.fragment .fade-out fragment-index=1}
![](images/shiny_hex.png){.absolute top="15" right="50" height="250"}
:::

-   Application's back end logic

-   Built within a `server` function

-   Renders outputs based on inputs

::: {.fragment fragment-index=1}
::: columns
::: {.column width="50%"}
```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
ui <- fluidPage(
  textInput("name", "What's your name?"),
  textOutput("text")
  )

server <- function(input, output, session) {
  output$text <- renderText(
    paste("Hello, my name is ", input$name))
  }

shinyApp(ui, server)
```
:::
:::

![](images/reactive0.png){.absolute top="55" right="14" width="450"}
![](images/reactive1.png){.absolute top="240" right="14" width="450"}
![](images/reactive2.png){.absolute top="428" right="14" width="450"}
:::

## Topic 3: Reactive Programming (server) {data-menu-title="Reactive Programming" auto-animate="true"}

-   Application's back end logic

-   Built within a `server` function

-   Renders outputs based on inputs

-   Some things to remember:

    - Input objects are read only

::: {.absolute top="55" right="0" width="500"}
```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
ui <- fluidPage(
  textInput("name", "What's your name?"),
  textOutput("text")
  )

server <- function(input, output, session) {
  input$name <- "Jeremy Mack"
  }

shinyApp(ui, server)
```
:::

::: {.fragment fragment-index=1}
![](images/error2.png){.absolute top="250" right="0" width="500"}
:::

## Topic 3: Reactive Programming (server) {data-menu-title="Reactive Programming"}

-   Application's back end logic

-   Built within a `server` function

-   Renders outputs based on inputs

-   Some things to remember:

    - Input objects are read only
    - Input and output objects are read in</br>reactive context created by functions like</br>`renderText` or `reactive`

::: {.absolute top="55" right="0" width="500"}
```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
ui <- fluidPage(
  textInput("name", "What's your name?"),
  textOutput("text")
  )

server <- function(input, output, session) {
  #input$name <- "Jeremy Mack"
  paste("Hello, my name is ", input$name)
  }

shinyApp(ui, server)
```
:::

::: {.fragment fragment-index=1}
![](images/error4.png){.absolute top="270" right="0" width="500"}
:::

## Topic 3: Reactive Programming (server) {data-menu-title="Reactive Programming"}

-   Application's back end logic

-   Built within a `server` function

-   Renders outputs based on inputs

-   Some things to remember:

    - Input objects are read only
    - Input and output objects are read in</br>reactive context created by functions like</br>`renderText` or `reactive`
    - Check your spelling!

::: {.absolute top="55" right="0" width="500"}
```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
ui <- fluidPage(
  textInput("name", "What's your name?"),
  textOutput("text")
  )

server <- function(input, output, session) {
  #input$name <- "Jeremy Mack"
  #paste("Hello, my name is ", input$name)
  output$texts <- renderText(
    paste("Hello, my name is ", input$name))
  }

shinyApp(ui, server)
```
:::

::: {.fragment fragment-index=1}
![](images/error6.png){.absolute top="305" right="0" width="500"}
:::

## Topic 3: Reactive Programming (server) {data-menu-title="Reactive Programming"}

-   Application's back end logic

-   Built within a `server` function

-   Renders outputs based on inputs

-   Some things to remember:

    - Input objects are read only
    - Input and output objects are read in</br>reactive context created by functions like</br>`renderText` or `reactive`
    - Check your spelling!

::: {.absolute top="55" right="0" width="500"}
```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
ui <- fluidPage(
  textInput("name", "What's your name?"),
  textOutput("text")
  )

server <- function(input, output, session) {
  #input$name <- "Jeremy Mack"
  #paste("Hello, my name is ", input$name)
  output$text <- renderText(
    paste("Hello, my name is ", input$name))
  }

shinyApp(ui, server)
```
:::

::: {.fragment fragment-index=1}
![](images/error8.png){.absolute top="305" right="0" width="500"}
:::

## Review - Server function: {data-background="#000000" data-menu-title="Review 1 - server"}

![](images/shiny_hex.png){.absolute bottom="0" right="0" height="40%"}

-   `shiny` package - web application framework for R

-   Three basic components:

    1. User interface (ui) object
    2. Server function (server)
    3. Call to the `shinyApp` function

::: fragment
-   Server function (server):
    
    - Application's back end logic
    - [**Reactive programming**]{style="color:#edea2b"}
      1. Reacts to inputs from the ui
      2. Renders outputs
      3. Fills in output placeholders created in the ui
:::

# Topic 4 {data-menu-title="Topic 4"}

[Layouts and Themes]{style="font-size: 1.5em; text-align: center"}

## Topic 4: Layouts and Themes {data-menu-title="Layouts"}

![](images/shiny_hex.png){.absolute top="15" right="50" height="250"}

-   [Layouts]{style="color:#edea2b"} add structure to an application

-   Created by a hierarchy of functions

## Topic 4: Layouts and Themes {data-menu-title="sidebar" auto-animate="true"}

-   [Layouts]{style="color:#edea2b"} add structure to an application

-   Created by a hierarchy of functions

-   sidebarLayout:

::: columns
::: {.column width="60%"}
```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
ui <- fluidPage(
)

server <- function(input, output, session) {}

shinyApp(ui, server)
```
:::
::: {.column width="40%"}
![](images/layout1.png){.absolute top="200" right="0" width="420"}
:::
:::

## Topic 4: Layouts and Themes {data-menu-title="sidebar" auto-animate="true"}

-   [Layouts]{style="color:#edea2b"} add structure to an application

-   Created by a hierarchy of functions

-   sidebarLayout:

::: columns
::: {.column width="60%"}
```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
ui <- fluidPage(
  titlePanel(),
  sidebarLayout(
        sidebarPanel(),
        mainPanel()
        )
)

server <- function(input, output, session) {}

shinyApp(ui, server)
```
:::
::: {.column width="40%"}
![](images/layout1.png){.absolute top="200" right="0" width="420"}
:::
:::

## Topic 4: Layouts and Themes {data-menu-title="sidebar" auto-animate="true"}

-   [Layouts]{style="color:#edea2b"} add structure to an application

-   Created by a hierarchy of functions

-   sidebarLayout:

::: columns
::: {.column width="60%"}
```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
ui <- fluidPage(
  titlePanel('My first Shiny App'),
  sidebarLayout(
        sidebarPanel(
          width=2,
          textInput('name', "What's your name?")),
        mainPanel(textOutput('text'))
        )
)

server <- function(input, output, session) {}

shinyApp(ui, server)
```
:::
::: {.column width="40%"}
![](images/layout1.png){.absolute top="200" right="0" width="420"}
:::
:::

## Topic 4: Layouts and Themes {data-menu-title="sidebar" auto-animate="true"}

-   [Layouts]{style="color:#edea2b"} add structure to an application

-   Created by a hierarchy of functions

-   sidebarLayout:

::: columns
::: {.column width="60%"}
```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
ui <- fluidPage(
  titlePanel('My first Shiny App'),
  sidebarLayout(
        sidebarPanel(
          width=2,
          textInput('name', "What's your name?")),
        mainPanel(textOutput('text'))
        )
)

server <- function(input, output, session) {
  output$text <- renderText({
    if (input$name=="")
      return(NULL)
    else paste("Hello, my name is ", input$name) 
    })
}

shinyApp(ui, server)
```
:::
::: {.column width="40%"}
![](images/layout1.png){.absolute top="200" right="0" width="420"}
:::
:::

## Topic 4: Layouts and Themes {data-menu-title="fluidrows" auto-animate="true"}

-   [Layouts]{style="color:#edea2b"} add structure to an application

-   Created by a hierarchy of functions

-   fluidRows with columns:

::: columns
::: {.column width="60%"}
```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
ui <- fluidPage(
    fluidRow(
        column(4, textInput("name", "What's your name?")),
        column(8, textOutput("text"))),
    fluidRow(
        column(6, dataTableOutput("dynamic")),
        column(6, plotOutput("plot"))))

server <- function(input, output, session) {
    output$text <- renderText({
        if (input$name=="")
            return(NULL)
        else paste("Hello, my name is ", input$name) 
    })
    output$dynamic <- renderDataTable(mtcars)
    output$plot <- renderPlot(
        ggplot(mtcars, aes(hp,mpg)) + geom_point())}

shinyApp(ui, server)
```
:::
::: {.column width="40%"}
![](images/layout2.png){.absolute top="200" right="0" width="420"}
:::
:::

## Topic 4: Layouts and Themes {data-menu-title="tabset" auto-animate="true"}

-   [Layouts]{style="color:#edea2b"} add structure to an application

-   Created by a hierarchy of functions

-   Tabsets:

::: columns
::: {.column width="60%"}
```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
ui <- fixedPage(
  tabsetPanel(
    tabPanel("Import data", 
      fileInput("file", "File:", buttonLabel="Upload file"),
      checkboxInput("header", "File has headers", TRUE)),
    tabPanel("Table", dataTableOutput("table")),
    tabPanel("Graph", plotOutput("plot"))))

server <- function(input, output, session) {
  df <- reactive({
    file <- input$file
    read.csv(file$datapath, header=input$header)
  })
  output$table <- renderDataTable(df())
  output$plot <- renderPlot(
    ggplot(df(), aes(hp,mpg)) + geom_point())}

shinyApp(ui, server)
```
:::
::: {.column width="40%"}
![](images/layout3b.png){.absolute top="200" right="0" width="420"}
:::
:::

## Topic 4: Layouts and Themes {data-menu-title="Themes"}

![](images/shiny_hex.png){.absolute top="15" right="50" height="250"}

-   [Themes]{style="color:#edea2b"} change the overall appearance

-   Shiny uses a Bootstrap framework

## Topic 4: Layouts and Themes {data-menu-title="Themes" auto-animate="true"}

-   [Themes]{style="color:#edea2b"} change the overall appearance

-   Shiny uses a Bootstrap framework

-   Customizations made using  `bslib`

::: columns
::: {.column width="60%"}
```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
ui <- fixedPage(
  tabsetPanel(
    tabPanel("Import data", 
      fileInput("file", "File:", buttonLabel="Upload file"),
      checkboxInput("header", "File has headers", TRUE)),
    tabPanel("Table", dataTableOutput("table")),
    tabPanel("Graph", plotOutput("plot"))))

server <- function(input, output, session) {
    df <- reactive({
        file <- input$file
        read.csv(file$datapath, header=input$header)
    })
    output$table <- renderDataTable(df())
    output$plot <- renderPlot(
        ggplot(df(), aes(hp,mpg)) + geom_point())}

shinyApp(ui, server)
```
:::
::: {.column width="40%"}
![](images/layout3b.png){.absolute top="200" right="0" width="420"}
:::
:::

## Topic 4: Layouts and Themes {data-menu-title="Themes" auto-animate="true"}

-   [Themes]{style="color:#edea2b"} change the overall appearance

-   Shiny uses a Bootstrap framework

-   Customizations made using  `bslib`

::: columns
::: {.column width="60%"}
```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
ui <- fixedPage(
  theme=bslib::bs_theme(bootswatch = "darkly"),
  tabsetPanel(
    tabPanel("Import data", 
      fileInput("file", "File:", buttonLabel="Upload file"),
      checkboxInput("header", "File has headers", TRUE)),
    tabPanel("Table", dataTableOutput("table")),
    tabPanel("Graph", plotOutput("plot"))))

server <- function(input, output, session) {
  df <- reactive({
    file <- input$file
    read.csv(file$datapath, header=input$header)
  })
  output$table <- renderDataTable(df())
  output$plot <- renderPlot(
    ggplot(df(), aes(hp,mpg)) + geom_point())}

shinyApp(ui, server)
```
:::
::: {.column width="40%"}
![](images/layout4b.png){.absolute top="200" right="0" width="420"}
:::
:::

## Topic 4: Layouts and Themes {data-menu-title="Themes" auto-animate="true"}

-   [Themes]{style="color:#edea2b"} change the overall appearance

-   Shiny uses a Bootstrap framework

-   Customizations made using  `bslib`

-   Plot themes can be matched with  `thematic`

::: columns
::: {.column width="60%"}
```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
ui <- fixedPage(
  theme=bslib::bs_theme(bootswatch = "darkly"),
  tabsetPanel(
    tabPanel("Import data", 
      fileInput("file", "File:", buttonLabel="Upload file"),
      checkboxInput("header", "File has headers", TRUE)),
    tabPanel("Table", dataTableOutput("table")),
    tabPanel("Graph", plotOutput("plot"))))

server <- function(input, output, session) {
  thematic::thematic_shiny()
  df <- reactive({
    file <- input$file
    read.csv(file$datapath, header=input$header)
  })
  output$table <- renderDataTable(df())
  output$plot <- renderPlot(
    ggplot(df(), aes(hp,mpg)) + geom_point())}

shinyApp(ui, server)
```
:::
::: {.column width="40%"}
![](images/layout5.png){.absolute top="241" right="0" width="420"}
:::
:::

## Topic 4: Layouts and Themes {data-menu-title="Themes" auto-animate="true"}

-   [Themes]{style="color:#edea2b"} change the overall appearance

-   Shiny uses a Bootstrap framework

-   Customizations made using  `bslib`

-   Plot themes can be matched with  `thematic`

-   Custom HTML and CSS can be applied

<p>

<center <a href="https://shiny.rstudio.com/articles/html-tags.html"> <img src="./images/html.png" alt="Picture of learning R graph" height="70%" width="70%"/> </a> </center>

</p>

## Topic 4: Layouts and Themes {data-menu-title="Layouts"}

::: {data-id="box1" auto-animate-delay="0" style="background: white; width: 300px; height: 280px; margin: 10px;" .absolute top="15" right="40"}
:::

![](images/awesome.png){.absolute top="20" right="85" height="250"}

-   [Layouts]{style="color:#edea2b"} add structure to an application

-   [Themes]{style="color:#edea2b"} change the overall appearance

-   Extension packages exist that combine the two

    - Posit - `shinydashboard`
    - [Awesome Shiny Extensions](https://github.com/nanxstats/awesome-shiny-extensions)

# Topic 5 {data-menu-title="Topic 5"}

[Example - Lehigh Valley Temperature]{style="font-size: 1.5em; text-align: center"}

## Topic 5: Example - Lehigh Valley Temperature {data-menu-title="Example"}

<p>

<center <a href="https://jeremymack.shinyapps.io/purpleair/"> <img src="./images/climate_shiny.png" alt="Picture of learning R graph" height="100%" width="100%"/> </a> </center>

</p>

## Topic 5: Example - required packages {data-menu-title="Example - packages"}

```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
# Load packages ----
library(shiny)           # Web application framework
library(shinydashboard)  # Dashboard templates for Shiny
library(readr)           # Read in rectangular text files
library(dplyr)           # Data manipulation
library(tidyr)           # Data cleanup
library(ggplot2)         # Grammar of graphics data viz
library(lubridate)       # Working with dates
library(leaflet)         # JS leaflet library
```

::: fragment
-   Note that bulk loading techniques will not work when deployed

```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
# Load packages ----
library(pacman)
pload(shiny,shinydashboard,readr,dplyr,tidyr,ggplot2,lubridate,leaflet)
```
:::

## Topic 5: Example - data & data cleanup {data-menu-title="Example - data"}

```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
# Load climate data ----

# Read in climate data
url <- "https://raw.githubusercontent.com/jeremymack-LU/shinyapps/master/data/abe_climate.csv"
df <- read_csv(url, col_types=cols(tavg=col_double()))

# Fix extreme outlier
df[df$date==as.Date("1954-05-20"),8] <- NA

# Calculate daily mean temperature (dmt) and day of year (doy)
df <- df %>%
  # Convert from units of tenths
  mutate(prcp=prcp/10,
         tmax=tmax/10,
         tmin=tmin/10,
         tavg=tavg/10) %>%
  # Convert to from degrees C to degrees F
  mutate(dmt=(tmax+tmin)/2,
         doy=yday(date),
         tmin=tmin * 1.8 + 32,
         tmax=tmax * 1.8 + 32,
         dmt=dmt * 1.8 + 32,
         year=year(date))
```

## Topic 5: Example - data summary {data-menu-title="Example - data"}

```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
# Summarize temperature data ----

# Calculate monthly means by year
monthly.means <- df %>%
    group_by(month(date), year(date)) %>%
    summarize(avg=mean(dmt, na.rm=TRUE)) %>%
    rename(month=`month(date)`,
           year=`year(date)`)

# Calculate the overall means by month
monthly.sum <- df %>%
    group_by(month(date)) %>%
    summarize(avg=mean(dmt, na.rm=TRUE)) %>%
    rename(month=`month(date)`)

# Long to wide format
monthly.sum.W <- monthly.sum %>%
    mutate(Year='1948-2021',label=month.abb[month]) %>% 
    pivot_wider(id_cols=Year,names_from=label,values_from=avg) %>% 
    mutate(Annual_mean=rowMeans(.[,2:13], na.rm=TRUE),
           Annual_diff=0)

# Assign labels and map settings
labels <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
map    <- tibble(lat=40.65, lng=-75.442, zoom=13)
```

## Topic 5: Example - shiny app ui {data-menu-title="Example - ui"}

```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
# Create the Shiny App ----

# User Interface (ui)
ui <- dashboardPage(skin="black",
                    dashboardHeader(
                        title="Lehigh Valley Temperature", titleWidth=300),
                    dashboardSidebar(
                        width=300,
                        selectInput(
                            inputId="years",
                            label="Select year(s):",
                            choices=seq(1948,2022,1),
                            multiple=TRUE,
                            selected=2022)),
                    dashboardBody(
                        fluidRow(column(12,plotOutput("plot", height='500px'))),
                        br(),
                        fluidRow(column(8,tableOutput("data")),
                                 column(4,leafletOutput("map"),
                                        fluidRow(column(12, 'Location of Lehigh Valley weather station.'))))
                    )
)
```

## Topic 5: Example - shiny app server {data-menu-title="Example - server" auto-animate="true"}

```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
# Server function (server)

server <- function(input, output, session) {
  df.sub <- reactive(monthly.means %>% filter(year %in% input$years))
    
  output$plot <- renderPlot(ggplot() +
                                  geom_boxplot(aes(month,avg,group=month), monthly.means) +
                                  geom_point(aes(month,avg), monthly.sum,size=4,fill='darkgray',shape=22) +
                                  geom_point(aes(month,avg,color=factor(year)),df.sub(),size=3) +
                                  scale_x_continuous(breaks=seq(1,12,1),labels=labels,expand=c(0.02,0)) +
                                  labs(x="Month",y="Temperature (°F)",color="Year") + theme_dark())
```

## Topic 5: Example - shiny app server {data-menu-title="Example - server" auto-animate="true"}

```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
# Server function (server)

server <- function(input, output, session) {
  df.sub <- reactive(monthly.means %>% filter(year %in% input$years))
  
  output$plot <- renderPlot(ggplot() +
                              geom_boxplot(aes(month,avg,group=month), monthly.means) +
                              geom_point(aes(month,avg), monthly.sum,size=4,fill='darkgray',shape=22) +
                              geom_point(aes(month,avg,color=factor(year)),df.sub(),size=3) +
                              scale_x_continuous(breaks=seq(1,12,1),labels=labels,expand=c(0.02,0)) +
                              labs(x="Month",y="Temperature (°F)",color="Year") + theme_dark())
  
  output$data <- renderTable({
    if(is.null(input$years)) monthly.sum.W %>% rename('Annual Mean'=Annual_mean, 'Annual Diff'=Annual_diff)
    else df.sub() %>%
      mutate(month=as.integer(month),label=month.abb[month],Year=as.integer(year)) %>%
      pivot_wider(id_cols=Year,names_from=label,values_from=avg) %>%
      mutate(Annual_mean=rowMeans(.[,-1], na.rm=TRUE)) %>%
      mutate(Annual_diff=Annual_mean-mean(df$dmt, na.rm=TRUE)) %>%
      mutate(Year=as.character(Year)) %>%
      bind_rows(monthly.sum.W) %>%
      rename('Annual Mean'=Annual_mean, 'Annual Diff'=Annual_diff)}, digits=1)
```

## Topic 5: Example - shiny app server {data-menu-title="Example - server" auto-animate="true"}

```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
# Server function (server)

server <- function(input, output, session) {
  df.sub <- reactive(monthly.means %>% filter(year %in% input$years))
  
  output$plot <- renderPlot(ggplot() +
                              geom_boxplot(aes(month,avg,group=month), monthly.means) +
                              geom_point(aes(month,avg), monthly.sum,size=4,fill='darkgray',shape=22) +
                              geom_point(aes(month,avg,color=factor(year)),df.sub(),size=3) +
                              scale_x_continuous(breaks=seq(1,12,1),labels=labels,expand=c(0.02,0)) +
                              labs(x="Month",y="Temperature (°F)",color="Year") + theme_dark())
  
  output$data <- renderTable({
    if(is.null(input$years)) monthly.sum.W %>% rename('Annual Mean'=Annual_mean, 'Annual Diff'=Annual_diff)
    else df.sub() %>%
      mutate(month=as.integer(month),label=month.abb[month],Year=as.integer(year)) %>%
      pivot_wider(id_cols=Year,names_from=label,values_from=avg) %>%
      mutate(Annual_mean=rowMeans(.[,-1], na.rm=TRUE)) %>%
      mutate(Annual_diff=Annual_mean-mean(df$dmt, na.rm=TRUE)) %>%
      mutate(Year=as.character(Year)) %>%
      bind_rows(monthly.sum.W) %>%
      rename('Annual Mean'=Annual_mean, 'Annual Diff'=Annual_diff)}, digits=1)
  
  output$map <- renderLeaflet(
    leaflet() %>%
      setView(lat=map$lat, lng=map$lng, zoom=map$zoom) %>%
      addTiles("https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png") %>%
      addCircleMarkers(lng=map$lng, lat=map$lat,
        popup='Lehigh Valley International Airport<br>NOAA Weather Station', stroke=FALSE, fillOpacity=0.5))}
```

## Topic 5: Example - run Shiny App {data-menu-title="Example - shiny app" auto-animate="true"}

```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
# Run the app

shinyApp(ui, server)
```

<p>

<center <a href="https://jeremymack.shinyapps.io/purpleair/"> <img src="./images/climate_shiny.png" alt="Picture of learning R graph" height="100%" width="100%"/> </a> </center>

</p>

# Topic 6 {data-menu-title="Topic 6"}

[Deploying Shiny Apps]{style="font-size: 1.5em; text-align: center"}

## Topic 6: Deploying Shiny Apps {data-menu-title="Deployment"}

-   Two methods for deployment:

    1. Run application [locally](https://shiny.rstudio.com/articles/deployment-local.html)
        - Gist, GitHub repository, .zip, R package
        - Gist example:
    ```{r style="font-size: 0.85em"}
#| eval: false
#| echo: true
shiny::runGist('72d6b068a3377972f385f053c2d87388')
    ```
        
    ::: fragment
    2. Deploy application on the [web](https://shiny.rstudio.com/articles/deployment-web.html)
        - Shiny server, shinyapps.io, RStudio Connect
    :::

![](images/shiny_hex.png){.absolute top="15" right="50" height="250"}

# Topic 7 {data-menu-title="Topic 7"}

[Resources]{style="font-size: 1.5em; text-align: center"}

## Topic 7: Resources {data-menu-title="Resources"}

-   [Lehigh's R Programming Slack Channel](https://lehigh-home.slack.com/archives/C04AE4B9X0S)

-   External resources:
    
    - [R for Data Science - Book](https://r4ds.had.co.nz/)
    - [R for Data Science - Slack Workspace](https://rfordatascience.slack.com)
    - [RStudio Cheat Sheets](https://www.rstudio.com/resources/cheatsheets/)
    - [Twitter for R Programmers](https://www.t4rstats.com/follow-some-folks.html)
    - [LinkedIn Learning](https://www.linkedin.com/learning/search?keywords=r%20programming&u=2222241)

-   Shiny Apps

    - [Mastering Shiny by Hadley Wickham](https://mastering-shiny.org/)
    - [RStudio tutortials](https://shiny.rstudio.com/tutorial/)
    - [Shiny extensions](https://github.com/nanxstats/awesome-shiny-extensions)
    
![](images/master_shiny.jpg){.absolute bottom="0" right="0" width="35%"}